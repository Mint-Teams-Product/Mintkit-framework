        /*
            Functional utilities
            For managing the functions of managing the
            Content sections to be created in HTML that includes CSS
            Makes managing the code faster and easier
            Using the Functional Programming approach
        */
        const pipe = (...functions) => (input) => functions.reduce((value, fn) => fn(value), input);
        const compose = (...functions) => (input) => functions.reduceRight((value, fn) => fn(value), input);

        /* 
            State Management like React's useState
            But it vanila JavaScript
        */
        function createState(initialValue) {
            let currentState = initialValue;
            const subscribers = [];
            return {
                get: () => currentState,
                set: (nextValue) => {
                    currentState = typeof nextValue === 'function' ? nextValue(currentState) : nextValue;
                    subscribers.forEach(callback => callback(currentState));
                },
                subscribe: (callback) => subscribers.push(callback)
            };
        }

        // CSS injection
        function injectCSS(cssString) {
            const styleElement = document.createElement('style');
            styleElement.innerHTML = cssString;
            document.head.appendChild(styleElement);
            return styleElement;
        }

        // Data for navigation and app content
        const navigation = {
            brand: { icon: "", name: "" },
            menuItems: ["", "", "", "", ""],
            theme: { primary: "#YOUR_COLOR_HERE", secondary: "#YOUR_COLOR_HERE" }
        };

        const appContent = {
            title: "",
            subtitle: "",
            features: [
                { icon: "", name: "" },
                { icon: "", name: "" },
                { icon: "", name: "" }
            ]
        };

        // CSS generator
        function generateCSS({ theme }) {
            return `
                * { margin: 0; padding: 0; box-sizing: border-box; }
            `;
        }

        // Template generators
        function createNavItem(label, isActive = false) {
            return `<a href="#${label.toLowerCase()}" class="nav-item${isActive ? ' active' : ''}" onclick="handleNavClick('${label}')">${label}</a>`;
        }

        function createNavbar({ brand, menuItems }, activeNav) {
            return `
                <nav class="navbar">
                    <div class="nav-container">
                        <a href="#" class="nav-brand">
                            <span>${brand.icon}</span>
                            <span>${brand.name}</span>
                        </a>
                        <div class="nav-menu">
                            ${menuItems.map(item => createNavItem(item, item === activeNav)).join('')}
                        </div>
                    </div>
                </nav>
            `;
        }

        function createHero({ title, subtitle }) {
            return `
                <section class="hero">
                    <div class="hero-container">
                        <h1 class="hero-title">${title}</h1>
                        <p class="hero-subtitle">${subtitle}</p>
                    </div>
                </section>
            `;
        }

        function createFeature({ icon, name, desc }) {
            return `
                <div class="feature">
                    <div class="feature-icon">${icon}</div>
                    <h3 class="feature-name">${name}</h3>
                    <p class="feature-desc">${desc}</p>
                </div>
            `;
        }

        function createFeatures({ features }) {
            return `
                <section class="features">
                    <div class="features-container">
                        <h2 style="text-align: center; font-size: 2rem; color: #333;">ทำไมต้อง Functional?</h2>
                        <div class="features-grid">
                            ${features.map(createFeature).join('')}
                        </div>
                    </div>
                </section>
            `;
        }

        // App state
        const appState = createState({
            activeNav: 'Home',
            isLoading: true
        });

        // Navigation click handler
        function handleNavClick(label) {
            appState.set(state => ({ ...state, activeNav: label }));
            console.log(`Navigate to: ${label}`);
        }

        // Render function
        function renderApp(state) {
            const html = [
                createNavbar(navigation, state.activeNav),
                createHero(appContent),
                createFeatures(appContent)
            ].join('');
            document.body.innerHTML = html;
        }

        // DOM ready utility
        function onDOMReady(callback) {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', callback);
            } else {
                callback();
            }
        }

        // Loading state utility
        function useLoading(callback, delay = 100) {
            if (appState.get().isLoading) {
                setTimeout(() => {
                    appState.set(state => ({ ...state, isLoading: false }));
                    callback();
                }, delay);
            }
        }

        // App initialization
        const initApp = pipe(
            () => injectCSS(generateCSS(navigation)),
            () => renderApp(appState.get()),
            () => console.log('App is Ready!')
        );

        // App lifecycle
        onDOMReady(() => {
            useLoading(() => {
                initApp();
                appState.subscribe((state) => {
                    console.log('State changed:', state);
                    if (!state.isLoading) {
                        renderApp(state);
                    }
                });
            });
        });

        // Expose for onclick
        window.handleNavClick = handleNavClick;